package groovebox.service;

import java.util.function.Supplier;

public enum BeatSamples {
	REGGAETON(() -> BeatFactory.builder()
			.withTempoInBPM(94)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 0, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 1, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 2, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 3, 0)
			.withInstrumentPositions(Instrument.ELECTRIC_SNARE, 1, 2)
			.withInstrumentPositions(Instrument.ELECTRIC_SNARE, 3, 2)
			.withInstrumentPositions(Instrument.SIDE_STICK, 1, 2)
			.withInstrumentPositions(Instrument.SIDE_STICK, 3, 2)
			.withInstrumentPositions(Instrument.LOW_FLOOR_TOM, 0, 3)
			.withInstrumentPositions(Instrument.LOW_FLOOR_TOM, 2, 3)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 1)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 1)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 1)
			.withInstrumentPositions(Instrument.CRASH_CYMBAL_1, 0, 0)
			.build()),
	CLASSIC_HOUSE(() -> BeatFactory.builder()
			.withTempoInBPM(128)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 0, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 1, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 2, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 3, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_SNARE, 1, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_SNARE, 3, 0)
			.withInstrumentPositions(Instrument.HAND_CLAP, 1, 0)
			.withInstrumentPositions(Instrument.HAND_CLAP, 3, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 0, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 2)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 0, 1)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 0, 3)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 1, 1)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 1, 3)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 2, 1)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 2, 3)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 3, 1)
			.withInstrumentPositions(Instrument.PEDAL_HI_HAT, 3, 3)
			.withInstrumentPositions(Instrument.CRASH_CYMBAL_1, 0, 0)
			.withInstrumentPositions(Instrument.SIDE_STICK, 1, 1)
			.withInstrumentPositions(Instrument.SIDE_STICK, 3, 1)
			.build()),
	MELBOURNE_BOUNCE(() -> BeatFactory.builder()
			.withTempoInBPM(135)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 0, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 1, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 2, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 3, 0)
			.withInstrumentPositions(Instrument.ELECTRIC_SNARE, 1, 0)
			.withInstrumentPositions(Instrument.ELECTRIC_SNARE, 3, 0)
			.withInstrumentPositions(Instrument.HAND_CLAP, 1, 0)
			.withInstrumentPositions(Instrument.HAND_CLAP, 3, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 0, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 2)
			.withInstrumentPositions(Instrument.OPEN_HI_HAT, 0, 3)
			.withInstrumentPositions(Instrument.OPEN_HI_HAT, 1, 3)
			.withInstrumentPositions(Instrument.OPEN_HI_HAT, 2, 3)
			.withInstrumentPositions(Instrument.OPEN_HI_HAT, 3, 3)
			.withInstrumentPositions(Instrument.LOW_TOM, 1, 2)
			.withInstrumentPositions(Instrument.LOW_TOM, 3, 2)
			.withInstrumentPositions(Instrument.BASS_DRUM_1, 0, 0)
			.withInstrumentPositions(Instrument.BASS_DRUM_1, 1, 0)
			.withInstrumentPositions(Instrument.BASS_DRUM_1, 2, 0)
			.withInstrumentPositions(Instrument.BASS_DRUM_1, 3, 0)
			.withInstrumentPositions(Instrument.LOW_FLOOR_TOM, 0, 2)
			.withInstrumentPositions(Instrument.LOW_FLOOR_TOM, 1, 2)
			.withInstrumentPositions(Instrument.LOW_FLOOR_TOM, 2, 2)
			.withInstrumentPositions(Instrument.LOW_FLOOR_TOM, 3, 2)
			.withInstrumentPositions(Instrument.CRASH_CYMBAL_1, 0, 0)
			.build()),
	HIP_HOP(() -> BeatFactory.builder()
			.withTempoInBPM(85)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 0, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_BASS_DRUM, 2, 2)
			.withInstrumentPositions(Instrument.ACOUSTIC_SNARE, 1, 0)
			.withInstrumentPositions(Instrument.ACOUSTIC_SNARE, 3, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 0, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 0, 1)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 0, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 0, 3)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 1)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 1, 3)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 1)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 2, 3)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 0)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 1)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 2)
			.withInstrumentPositions(Instrument.CLOSED_HI_HAT, 3, 3)
			.withInstrumentPositions(Instrument.HAND_CLAP, 1, 0)
			.withInstrumentPositions(Instrument.HAND_CLAP, 3, 0)
			.withInstrumentPositions(Instrument.LOW_TOM, 1, 2)
			.withInstrumentPositions(Instrument.LOW_TOM, 3, 2)
			.withInstrumentPositions(Instrument.CRASH_CYMBAL_1, 0, 0)
			.build()),
	;
	private final Supplier<BeatFactory> beatSupplier;

	BeatSamples(Supplier<BeatFactory> beatSupplier) {
		this.beatSupplier = beatSupplier;
	}

	public BeatFactory createBeat() {
		return beatSupplier.get();
	}
}
